#!/usr/bin/python3

from os import path
from Levenshtein import distance
from shutil import copy
import fnmatch
import os

def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)
                yield filename

home = path.expanduser('~')
here = os.getcwd()
scalable = path.join(path.dirname(here), 'symbolia', 'scalable')
actions = path.join(scalable, 'actions')
apps = path.join(scalable, 'apps')
categories = path.join(scalable, 'categories')
devices = path.join(scalable, 'devices')
emblems = path.join(scalable, 'emblems')
mimetypes = path.join(scalable, 'mimetypes')
places = path.join(scalable, 'places')
status = path.join(scalable, 'status')

action_icons = os.listdir(actions)
app_icons = os.listdir(apps)
category_icons = os.listdir(categories)
device_icons = os.listdir(devices)
emblem_icons = os.listdir(emblems)
mimetype_icons = os.listdir(mimetypes)
place_icons = os.listdir(places)
status_icons = os.listdir(status)

all_icons = action_icons + app_icons + category_icons + device_icons + emblem_icons + mimetype_icons + place_icons + status_icons
all_icons = [s[:-4] for s in all_icons]

def match_icon(fp):
    parent = path.dirname(fp)
    basename = path.basename(fp)
    symbolic = '-symbolic.svg' in basename
    if 'action' in parent:
        src = actions
    elif 'app' in parent:
        src = apps
    elif 'categor' in parent:
        src = categories
    elif 'device' in parent:
        src = devices
    elif 'emblem' in parent:
        src = emblems
    elif 'mime' in parent:
        src = mimetypes
    elif 'place' in parent:
        src = places
    elif 'status' in parent:
        src = status
    elif 'panel' in parent:
        src = status
    elif 'bar' in parent:
        src = status
    elif 'tray' in parent:
        src = status
    else:
        src = 'any'
    if not src == 'any':
        available = os.listdir(src)
        if symbolic:
            available = [s[:-4] + '-symbolic.svg' for s in available]
        if basename in available:
            if symbolic:
                basename = basename[:-13] + '.svg'
            src_path = path.join(src, basename)
            return src_path
    if symbolic:
        corename = basename[:-13]
    else:
        corename = basename[:-4]
    all_icons.sort(key=lambda s: distance(s, corename))
    best_icon = all_icons[0]
    src_paths = []
    srcs = find_files(scalable, best_icon + '.svg')
    for s in srcs:
        src_paths.append(s)
    return src_paths[0]

extensions = path.join(home, '.local', 'share', 'gnome-shell', 'extensions')
root_extensions = path.join('/usr', 'share', 'gnome-shell', 'extensions')

paths = find_files(extensions, '*.svg')
for fp in paths:
    if '-symbolic.svg' in fp:
        sp = match_icon(fp)
        print(path.basename(sp) + ' -> ' + path.basename(fp))
        copy(sp, fp)
paths = find_files(root_extensions, '*.svg')
for fp in paths:
    if '-symbolic.svg' in fp:
        sp = match_icon(fp)
        print(path.basename(sp) + ' -> ' + path.basename(fp))
        os.system('sudo cp ' + sp + ' ' + fp)